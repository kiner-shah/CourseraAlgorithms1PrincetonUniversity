// Associtative array abstraction: associate one value with each key
// Conventions: values are not null, get() returns null if key not present, put() overrides old value with new value
// Value type: any generic type
// Assumptions:
//	1. keys are Comparable and use compareTo() (specify Comparable in API)
//	2. keys are any generic type, use equals() to test equality
//	3. keys are any generic type, use equals() to test equality, use hashCode() to scramble key

// Equality
// All Java classes inherit a method equals()
// For any references x, y and z:
//	1. Reflexive: x.equals(x) is true
//	2. Symmetric: x.equals(y) iff y.equals(x)
//	3. Transitive: x.equals(y) and y.equals(z), then x.equals(z)
//	4. Not null: x.equals(null) is false
public final class Date implements Comparable<Date> {
	private final int day;
	private final int month;
	private final int year;

	public boolean equals(Object y) {
		if(this == y) return true;	// optimize for true object equality

		if(y == null) return false;
		if(y.getClass() != this.getClass()) return false;

		Date that = (Date) y;	// cast will always be successful due to above if condition
		if(this.day != that.day) return false;
		if(this.month != that.month) return false;
		if(this.year != that.year) return false;
		return true;
	}
}

// Unordered singly-linked list of key-value pairs implementation
//	1. Search: scan through all keys untill finds a match
//	2. Insert: scan through all keys untill finds a match; if no match add to front

// Maintain an ordered array of key-value pairs
// Problem: need to shift all greater keys over when insert has to be performed
public Value get(Key key) {
	if(isEmpty()) return null;
	int i = rank(key);
	if(i < N && keys[i].compareTo(key) == 0) return keys[i];
	else return null;
}
private int rank(Key key) {
	int lo = 0, hi = N - 1;
	while(lo < hi) {
		int mid = lo + (hi - lo) / 2;
		int cmp = key.compareTo(keys[mid]);
		if(cmp < 0) hi = mid - 1;
		else if(cmp > 0) lo = mid + 1;
		else return mid;
	}
	return lo;
}