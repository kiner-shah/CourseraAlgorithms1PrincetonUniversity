// Save items in a key-indexed table (index as a function of key)
// Hash function: method for computing array index from key

// Issues:
//	1. Computing the hash funciton
//	2. Equality test: method for checking whether two keys are equal
//	3. Collision resolution: algorithm and data structure to handle two keys that hash to same array index

// Idealistic goal: Scramble keys uniformly to produce a table index
//	1. Efficiently computable
//	2. Each table index equally likely for each index

// hashCode(): returns a 32-bit int
// Requirement: if x.equals(y), then x.hashCode() == y.hashCode()
// Highly desirable: if !x.equals(y), then x.hashCode() != y.hashCode()
// Default implementation: memory address of x

// Java library implementations:
public final class Integer {
	private final int value;

	public int hashCode() { return value; }
}

public final class Boolean {
	private final boolean value;

	public int hashCode() {
		if (value) return 1231;
		else return 1237;
	}
}
public final class Double {
	private final double value;

	public int hashCode() {
		long bits = doubleToLongBits(value);	// convert to IEEE 64-bit representation
		return (int) (bits ^ (bits >>> 32));	// XOR most-significant 32 bits with least-significant 32 bits
	}
}
// String's hashCode() uses Horner's method (for string of length L)
// Equivalent to: s[0] * pow(31, L - 1) + ... + s[L - 3] * pow(31, 2) + s[L - 2] * pow(31, 1) + s[L - 1] * pow(31, 0)
public final class String {
	private final char[] s;

	public int hashCode() {
		int hash = 0;
		for (int i = 0; i < s.length; i++) {
			hash = s[i] + 31 * hash;
		}
		return hash;
	}
}
// Performance optimization: cache the hash value in an instance variable and return cached value
public final class String {
	private final char[] s;
	private int hash = 0;

	public int hashCode() {
		int h = hash;
		if (h != 0) return h;
		for (int i = 0; i < s.length; i++) {
			h = s[i] + 31 * h;
		}
		hash = h;
		return h;
	}
}

// User-defined types
public final class Transaction implements Comparable<Transaction> {
	private final String who;
	private final Date when;
	private final double amount;

	public boolean equals(Object y) {
		/* implementation */
	}
	public int hashCode() {
		int hash = 17;
		hash = 31 * hash + who.hashCode();
		hash = 31 * hash + when.hashCode();
		hash = 31 * hash + ((Double) amount).hashCode();
		return hash;
	}
}
// Hash code design:
//	1. Combine each significant field using 31x + y rule
//	2. If field is primitive type, use wrapper type hashCode()
//	3. If field is null, return 0
//	4. If field is reference type, use hashCode() (applies rule recursively)
//	5. If field is array, then apply to each entry (or use Arrays.deepHashCode())

// Basic rule: Need to use whole key to compute hash code; consult an expert for state-of-the-art hash codes

// Modular hashing:
// hash code: int between -2^31 to 2^31 - 1
// hash function: int between 0 and M - 1 (for use as an array index)
private int hash(Key key) {
	return (key.hashCode & 0x7fffffff) % M;
}

// Uniform hashing assumption: each key is equally likely to hash to an integer bwteen 0 and M - 1
// Bins and balls: throw balls uniformly at random into M bins
// Birthday problem: expect two balls in the same bin after ~sqrt((pi * M) / 2) tosses
// Coupon collector: expect every bin has >= 1 ball after ~M ln M tosses
// Load balancing: after M tosses, expect most loaded bin to has big-thetha(log M / log log M) balls
