// 1-d interval search operations:
//	1. Insert an interval (lo, hi)
//	2. Search for an interval (lo, hi)
//	3. Delete an interval (lo, hi)
//	4. Interval intersection query: given an interval (lo, hi) find all intervals (or one interval) in data structure that intersects (lo, hi)
// Nondegeneracy assumption: no two intervals have the same left endpoint

// Create a BST where each node stores an interval (lo, hi)
// Use left endpoint as BST key
// Store max endpoint in subtree rooted at node

// Search for any one interval that intersects query interval (lo, hi)
//	1. If interval in node intersects query interval, return it
//	2. Else if left subtree is null, go right
//	3. Else if max endpoint in left subtree is less than lo, go right
//	4. Else go left
Node x = root;
while (x != null) {
	if (x.interval.insersects(lo, hi)) return x.interval;
	else if (x.left == null) x = x.right;
	else if (x.left.max < lo) x = x.right;
	else x = x.left;
}
return null;

