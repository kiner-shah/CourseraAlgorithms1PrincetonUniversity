// Iterable: class that has a method which returns an iterator.
// Iterator: class that has methods hasNext() and next();
// Java supports elegant client code (for each statement, shorthand)
for(String s : stack)
	StdOut.println(s);
// Equivalent code (longhand)
Iterator<Stack> i = stack.iterator();
while(i.hashNext()) {
	String s = i.next();
	StdOut.println(s);
}
// Provide iterable for Stack
import java.util.Iterator;
public class Stack<Item> implements Iterable<Item> {
	public Iterator<Item> iterator() {
		return new ListIterator();
	}
	private class ListIterator implements Iterator<Item> {
		private Node current = first;
		public boolean hashNext() {
			return current != null;
		}
		// throw UnsuportedOperationException
		public void remove() {
			/* not supported */
		}
		// throw NoSuchElementException if no more items in iteration
		public Item next() {
			Item item = current.item;
			current = current.next;
			return item;
		}
	}
}
// for array implementation
public class Stack<Item> implements Iterable<Item> {
	public Iterator<Item> iterator() {
		return new ReverseArrayIterator();
	}
	private class ReverseArrayIterator implements Iterator<Item> {
		private int i = N;
		public boolean hasNext() { return i > 0; }
		public void remove() { /* not supported operation */ }
		public Item next() { return s[--i]; }
	}
}

// Bag API
// Bag: adding items to a collection and iterating (order doesn't matter)
public class Bag<Item> implements Iterable<Item> {
	Bag();	// create an empty bag
	void add(Item x); // add a new item to bag
	int size();	// no. of items in bag
	Iterable<Item> iterator();	// iterator for all items in a bag
}
// Implementation: Stack without pop or queue without dequeue