// Improvement 1: weighted quick-union
// Avoid tall trees by keeping track of sizes (no. of objects) of each tree
// Balance by linking root of smaller tree to larger tree
// Maintain an extra array, sz[i] to count number of objects rooted at i
// This algorithm scales. Complexity of union and find operations is logarithmic
boolean isConnected(int p, int q) {
	return root(p) == root(q);	// Similar as before
}
void union(int p, int q) {
	int i = root(p);
	int j = root(q);
	if(i == j) return;
	// link root of smaller tree to root of larger tree and update the sz[] array
	if(sz[i] < sz[j]) { id[i] = j; sz[j] += sz[i]; }
	else { id[j] = i; sz[i] += sz[j]; }
}

// Improvement 2: path compression
// After computing root of p, set the id of each examined node to point to that root
// Make every node in the path point to its grandparent
private int root(int i) {
	while(i != id[i]) {
		id[i] = id[id[i]];
		i = id[i];
	}
	return i;
}

// Improvement 3: weighted quick-union with path compression
// Is almost linear.


// Union-find applications:
// Percolation problem: determine that whether in a grid of NxN cells where each cell either is empty or non-empty, is it possible to go from top-bottom through empty cells.